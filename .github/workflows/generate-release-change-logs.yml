name: Draft Release and Push to Backlog

on:
  pull_request:
    types: [ready_for_review, synchronize, closed]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  generate-tag:
    if: |
      startsWith(github.event.pull_request.head.ref, 'release/') &&
      github.event.pull_request.base.ref == 'master' &&
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.generate_tag.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate daily incremental tag
        id: generate_tag
        run: |
          # L·∫•y ng√†y hi·ªán t·∫°i theo timezone UTC (b·∫°n c√≥ th·ªÉ ch·ªânh timezone n·∫øu c·∫ßn)
          TODAY=$(date -u +"%Y%m%d")
          echo "Today: $TODAY"

          # L·∫•y danh s√°ch tag b·∫Øt ƒë·∫ßu b·∫±ng ng√†y h√¥m nay
          TAGS=$(git tag -l "${TODAY}*")

          echo "Existing tags: $TAGS"

          if [ -z "$TAGS" ]; then
            # N·∫øu ch∆∞a c√≥ tag n√†o ng√†y h√¥m nay, th√¨ tag = ng√†y h√¥m nay
            NEW_TAG="$TODAY"
          else
            # N·∫øu ƒë√£ c√≥ tag r·ªìi, l·∫•y s·ªë suffix l·ªõn nh·∫•t
            # V√≠ d·ª• c√°c tag: 20250609, 20250609-1, 20250609-2
            # L·∫•y s·ªë suffix: 0 n·∫øu tag ƒë√∫ng b·∫±ng TODAY (kh√¥ng suffix)
            # else l·∫•y ph·∫ßn suffix sau d·∫•u '-'
            MAX=0
            for TAG in $TAGS; do
              if [ "$TAG" = "$TODAY" ]; then
                NUM=0
              else
                NUM=${TAG#${TODAY}-}  # c·∫Øt b·ªè ph·∫ßn ng√†y
              fi
              # c·∫≠p nh·∫≠t max
              if [ "$NUM" -gt "$MAX" ]; then
                MAX=$NUM
              fi
            done
            NEW_TAG="${TODAY}-$((MAX+1))"
          fi

          echo "New tag: $NEW_TAG"

          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

  handle-release:
    if: |
      startsWith(github.event.pull_request.head.ref, 'release/') &&
      github.event.pull_request.base.ref == 'master' &&
      github.event.pull_request.draft == false
    needs: generate-tag
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  

      - name: Generate changelog from commits
        id: changelog
        run: |
          LOG=$(git log origin/${{ github.event.pull_request.base.ref }}..HEAD --pretty=format:"- %s (%an) | [%h](https://github.com/${{ github.repository }}/commit/%H)")
          
          # T·∫°o template Markdown cho changelog
          cat <<EOF > changelog.md
          # Release Notes for PR #${{ needs.generate-tag.outputs.tag }}

          ## Overview    
          **PR Creator:** ${{ github.event.pull_request.user.login }}
          **Release Branch:** ${{ github.event.pull_request.head.ref }}
      
          ## Changelog
          $LOG
      
          ---
      
          *Generated automatically by GitHub Actions*
          EOF

          # ƒê∆∞a n·ªôi dung file changelog.md v√†o output ƒë·ªÉ c√°c step sau c√≥ th·ªÉ d√πng
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get existing Backlog issue ID (if any)
        id: get_comment
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
      
            const marker = 'Backlog Issue ID:';
            const found = comments.data.find(c => c.body && c.body.includes(marker));
            const id = found ? found.body.split(marker)[1].trim() : '';
            core.setOutput('issue_id', id);

      - name: Create or Update Backlog issue
        id: backlog
        env:
          BACKLOG_SPACE: swiftclock.backlog.com
          BACKLOG_API_KEY: ${{ secrets.BACKLOG_API_KEY }}
          BACKLOG_PROJECT_ID: 151481
        run: |
          CHANGELOG="${{ steps.changelog.outputs.changelog }}"
          EXISTING_ID="${{ steps.get_comment.outputs.issue_id }}"
          echo "${{ steps.get_comment.outputs.result }}"

          if [ -z "$EXISTING_ID" ]; then
            echo "Creating new Backlog issue..."
            RES=$(curl -s -X POST "https://${BACKLOG_SPACE}/api/v2/issues?apiKey=${BACKLOG_API_KEY}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "projectId=${BACKLOG_PROJECT_ID}" \
              --data-urlencode "summary=Release from PR #${{ github.event.pull_request.number }}" \
              --data-urlencode "description=$CHANGELOG" \
              --data-urlencode "issueTypeId=645049" \
              --data-urlencode "priorityId=3")

            ISSUE_ID=$(echo "$RES" | jq -r '.id')
            echo "Backlog issue created with ID $ISSUE_ID"

            echo "issue_id=$ISSUE_ID" >> $GITHUB_OUTPUT
          else
            echo "Updating existing Backlog issue ID $EXISTING_ID..."
            curl -s -X PATCH "https://${BACKLOG_SPACE}/api/v2/issues/${EXISTING_ID}?apiKey=${BACKLOG_API_KEY}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "summary=Release from PR #${{ github.event.pull_request.number }}" \
              --data-urlencode "description=$CHANGELOG"
            echo "issue_id=$EXISTING_ID" >> $GITHUB_OUTPUT
          fi

      - name: Save Backlog issue ID to PR comment
        if: ${{ steps.get_comment.outputs.issue_id == '' || steps.get_comment.outputs.issue_id == null }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üìù Backlog Issue ID: ${{ steps.backlog.outputs.issue_id }}`
            });

      - name: Notify PR
        uses: actions/github-script@v7
        with:
          script: |
            const msg = context.payload.action === "ready_for_review"
              ? "‚úÖ Backlog ticket created and changelog posted."
              : "üîÑ Backlog ticket updated with latest changelog.";
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: msg
            });

  tag-release:
    if: |
      startsWith(github.event.pull_request.head.ref, 'release/') &&
      github.event.pull_request.base.ref == 'master' &&
      github.event.pull_request.merged == true
    needs: generate-tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.AUTH_GITHUB_TOKEN }}

      - name: Create and push tag
        run: |
          TAG=${{ needs.generate-tag.outputs.tag }}
          git tag "$TAG"
          git push origin "$TAG" 
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.generate-tag.outputs.tag }}
          name: Release ${{ needs.generate-tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_GITHUB_TOKEN }}
