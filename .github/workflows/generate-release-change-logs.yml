name: Draft Release and Push to Backlog

on:
  pull_request:
    types: [ready_for_review, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  handle-release:
    if: |
      startsWith(github.event.pull_request.head.ref, 'release/') &&
      github.event.pull_request.base.ref == 'master'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate changelog from commits
        id: changelog
        run: |
          LOG=$(git log origin/${{ github.event.pull_request.base.ref }}..HEAD --pretty=format:"- %s (%an)")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get existing Backlog issue ID (if any)
        id: get_comment
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
      
            const marker = 'Backlog Issue ID:';
            const found = comments.data.find(c => c.body && c.body.includes(marker));
            const id = found ? found.body.split(marker)[1].trim() : '';
            core.setOutput('issue_id', id);

      - name: Create or Update Backlog issue
        id: backlog
        env:
          BACKLOG_SPACE: swiftclock.backlog.com
          BACKLOG_API_KEY: ${{ secrets.BACKLOG_API_KEY }}
          BACKLOG_PROJECT_ID: 151481
        run: |
          CHANGELOG="${{ steps.changelog.outputs.changelog }}"
          EXISTING_ID="${{ steps.get_comment.outputs.issue_id }}"
          echo "${{ steps.get_comment.outputs.result }}"

          if [ -z "$EXISTING_ID" ]; then
            echo "Creating new Backlog issue..."
            RES=$(curl -s -X POST "https://${BACKLOG_SPACE}/api/v2/issues?apiKey=${BACKLOG_API_KEY}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "projectId=${BACKLOG_PROJECT_ID}" \
              --data-urlencode "summary=Release from PR #${{ github.event.pull_request.number }}" \
              --data-urlencode "description=$CHANGELOG" \
              --data-urlencode "issueTypeId=645049" \
              --data-urlencode "priorityId=3")

            ISSUE_ID=$(echo "$RES" | jq -r '.id')
            echo "Backlog issue created with ID $ISSUE_ID"

            echo "issue_id=$ISSUE_ID" >> $GITHUB_OUTPUT
          else
            echo "Updating existing Backlog issue ID $EXISTING_ID..."
            curl -s -X PATCH "https://${BACKLOG_SPACE}/api/v2/issues/${EXISTING_ID}?apiKey=${BACKLOG_API_KEY}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "comment=$CHANGELOG"
            echo "issue_id=$EXISTING_ID" >> $GITHUB_OUTPUT
          fi

      - name: Save Backlog issue ID to PR comment
        if: ${{ steps.get_comment.outputs.issue_id == '' || steps.get_comment.outputs.issue_id == null }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üìù Backlog Issue ID: ${{ steps.backlog.outputs.issue_id }}`
            });

      - name: Notify PR
        uses: actions/github-script@v7
        with:
          script: |
            const msg = context.payload.action === "ready_for_review"
              ? "‚úÖ Backlog ticket created and changelog posted."
              : "üîÑ Backlog ticket updated with latest changelog.";
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: msg
            });
