name: Draft Release and Push to Backlog

on:
  pull_request:
    types: [ready_for_review, synchronize, closed]

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  BACKLOG_SPACE: swiftclock.backlog.com
  BACKLOG_API_KEY: ${{ secrets.BACKLOG_API_KEY }}
  BACKLOG_PROJECT_ID: 151481

jobs:
  generate-tag:
    # Run this job only if PR is from a release/* branch, targeting master, and is not a draft
    if: |
      startsWith(github.event.pull_request.head.ref, 'release/') &&
      github.event.pull_request.base.ref == 'master' &&
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.generate_tag.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure we fetch all tags/commits for tag generation

      - name: Generate daily incremental tag
        id: generate_tag
        run: |
          # Get current date (UTC) as base for tag
          TODAY=$(date -u +"%Y%m%d")
          echo "Today: $TODAY"

          # List all tags starting with today’s date
          TAGS=$(git tag -l "${TODAY}*")
          echo "Existing tags: $TAGS"

          if [ -z "$TAGS" ]; then
            NEW_TAG="$TODAY"  # First tag of the day
          else
            # Determine the highest suffix for today’s tags
            MAX=0
            for TAG in $TAGS; do
              if [ "$TAG" = "$TODAY" ]; then
                NUM=0
              else
                NUM=${TAG#${TODAY}-}
              fi
              if [ "$NUM" -gt "$MAX" ]; then
                MAX=$NUM
              fi
            done
            NEW_TAG="${TODAY}-$((MAX+1))"
          fi

          echo "New tag: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

  handle-release:
    # Same condition: only for non-draft PRs from release/* to master
    if: |
      startsWith(github.event.pull_request.head.ref, 'release/') &&
      github.event.pull_request.base.ref == 'master' &&
      github.event.pull_request.draft == false
    needs: generate-tag
    runs-on: ubuntu-latest 
    outputs:
      issue_id: ${{ steps.backlog.outputs.issue_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  

      - name: Generate changelog from commits
        id: changelog
        run: |
          # Collect commit messages since the base branch
          LOG=$(git log origin/${{ github.event.pull_request.base.ref }}..HEAD --pretty=format:"- %s (%an) | [%h](https://github.com/${{ github.repository }}/commit/%H)")

          # Build changelog in markdown format
          cat <<EOF > changelog.md
          # Release Notes for PR #${{ needs.generate-tag.outputs.tag }}

          ## Overview    
          **PR Creator:** ${{ github.event.pull_request.user.login }}
          **Release Branch:** ${{ github.event.pull_request.head.ref }}
      
          ## Changelog
          $LOG
      
          ---
      
          *Generated automatically by GitHub Actions*
          EOF

          # Output changelog for use in later steps
          {
            echo 'changelog<<EOF'
            cat changelog.md
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Get existing Backlog issue ID (if any)
        id: get_comment
        uses: actions/github-script@v7
        with:
          script: |
            // Search for existing PR comments containing "Backlog Issue ID:"
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const marker = 'Backlog Issue ID:';
            const found = comments.data.find(c => c.body && c.body.includes(marker));
            const id = found ? found.body.split(marker)[1].trim() : '';
            core.setOutput('issue_id', id);

      - name: Create or Update Backlog issue
        id: backlog
        run: |
          CHANGELOG="${{ steps.changelog.outputs.changelog }}"
          EXISTING_ID="${{ steps.get_comment.outputs.issue_id }}"

          if [ -z "$EXISTING_ID" ]; then
            echo "Creating new Backlog issue..."
            RES=$(curl -s -X POST "https://${BACKLOG_SPACE}/api/v2/issues?apiKey=${BACKLOG_API_KEY}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "projectId=${BACKLOG_PROJECT_ID}" \
              --data-urlencode "summary=Release from PR #${{ github.event.pull_request.number }}" \
              --data-urlencode "description=$(printf '%s' "$CHANGELOG")" \
              --data-urlencode "issueTypeId=645049" \
              --data-urlencode "priorityId=3")
            
            ISSUE_ID=$(echo "$RES" | jq -r '.id')
            echo "Backlog issue created with ID $ISSUE_ID"
            echo "issue_id=$ISSUE_ID" >> $GITHUB_OUTPUT
          else
            echo "Updating existing Backlog issue ID $EXISTING_ID..."
            curl -s -X PATCH "https://${BACKLOG_SPACE}/api/v2/issues/${EXISTING_ID}?apiKey=${BACKLOG_API_KEY}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "summary=Release from PR #${{ github.event.pull_request.number }}" \
              --data-urlencode "description=$CHANGELOG"
            echo "issue_id=$EXISTING_ID" >> $GITHUB_OUTPUT
          fi

      - name: Save Backlog issue ID to PR comment
        # Only post comment if this is a new issue
        if: ${{ !steps.get_comment.outputs.issue_id }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `📝 Backlog Issue ID: ${{ steps.backlog.outputs.issue_id }}`
            });

            curl -s -X PATCH "https://${BACKLOG_SPACE}/api/v2/issues/${{ steps.backlog.outputs.issue_id }}?apiKey=${BACKLOG_API_KEY}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "statusId=2"

      - name: Notify PR
        uses: actions/github-script@v7
        with:
          script: |
            const msg = context.payload.action === "ready_for_review"
              ? "✅ Backlog ticket created and changelog posted."
              : "🔄 Backlog ticket updated with latest changelog.";
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: msg
            });

  tag-release:
    # Only run when the PR is merged into master
    if: |
      startsWith(github.event.pull_request.head.ref, 'release/') &&
      github.event.pull_request.base.ref == 'master' &&
      github.event.pull_request.merged == true
    needs: 
      - generate-tag
      - handle-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine unique tag to push
        id: set-tag
        run: |
          TAG_BASE=$(date -u +"%Y%m%d")
          echo "Base tag: $TAG_BASE"

          # Lấy danh sách tag trên remote bắt đầu bằng ngày hôm nay
          EXISTING_TAGS=$(git ls-remote --tags origin | grep "refs/tags/${TAG_BASE}" | awk -F'/' '{print $3}')
          echo "Existing tags on remote: $EXISTING_TAGS"

          MAX_SUFFIX=0
          for TAG in $EXISTING_TAGS; do
            if [[ "$TAG" == "$TAG_BASE" ]]; then
              NUM=0
            else
              NUM=${TAG#${TAG_BASE}-}
              # Nếu suffix không phải số thì bỏ qua
              if ! [[ "$NUM" =~ ^[0-9]+$ ]]; then
                NUM=0
              fi
            fi

            if (( NUM > MAX_SUFFIX )); then
              MAX_SUFFIX=$NUM
            fi
          done

          if (( MAX_SUFFIX == 0 )); then
            NEW_TAG="$TAG_BASE"
          else
            NEW_TAG="${TAG_BASE}-$((MAX_SUFFIX+1))"
          fi

          echo "New tag to push: $NEW_TAG"

          # Tạo output cho bước khác dùng
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          TAG=${{ steps.set-tag.outputs.new_tag }}
          git tag "$TAG"
          git push origin "$TAG" 
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.set-tag.outputs.new_tag }}
          name: ${{ steps.set-tag.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_GITHUB_TOKEN }}

      - name: Update content backlog
        run: |
          ISSUE_ID="${{ needs.handle-release.outputs.issue_id }}"
          curl -s -X PATCH "https://${BACKLOG_SPACE}/api/v2/issues/${ISSUE_ID}?apiKey=${BACKLOG_API_KEY}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "statusId=4" 
        
